{"version":3,"sources":["components/ColouredSquare.js","components/Note.js","App.js","index.js"],"names":["ColouredSquare","props","className","id","style","backgroundColor","backgroundColour","onClick","selected","Note","useState","show","setShow","title","setTitle","originalTitle","setOriginalTitle","text","setText","originalText","setOriginalText","headingColour","setHeadingColour","originalHeadingColour","setOriginalHeadingColour","noteText","split","map","str","Card","Text","key","nanoid","colouredSquares","colour","handleSquareSelected","e","newHeadingColour","target","Header","as","Body","Footer","Button","variant","deleteNote","Modal","onHide","closeButton","Title","htmlFor","squares","document","getElementById","children","i","length","type","value","onChange","rows","editNotes","App","notes","setNotes","updateStorage","localStorage","setItem","JSON","stringify","newTitle","newText","editedNotes","note","deletedNotes","filter","notesList","Container","fluid","Row","Col","sm","CardColumns","DATA","parse","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c1f58a23.chunk.js","sourcesContent":["import React from 'react';\n\nfunction ColouredSquare(props) {\n    return (\n        <div className=\"square\" id={props.id} style={{backgroundColor:props.backgroundColour}} onClick={props.selected}></div>\n    );\n}\n\nexport default ColouredSquare;","import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport Card from 'react-bootstrap/Card';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport ColouredSquare from './ColouredSquare';\n\nfunction Note(props) {\n  // hooks\n  const [show, setShow] = useState(props.show);\n  const [title, setTitle] = useState(props.title);\n  const [originalTitle, setOriginalTitle] = useState(props.title);\n  const [text, setText] = useState(props.text);\n  const [originalText, setOriginalText] = useState(props.text);\n  const [headingColour, setHeadingColour] = useState(props.headingColour);\n  const [originalHeadingColour, setOriginalHeadingColour] = useState(props.headingColour);\n\n  // split text on new line and \n  // create array of Card.Text components\n  const noteText = text.split(\"\\n\").map(str => \n    <Card.Text key={nanoid()}>\n      {str} \n    </Card.Text>\n  );\n\n  // create array of ColouredSquare components\n  const colours = [\"#1abc9c\", \"#2ecc71\", \"#3498db\", \"#9b59b6\", \"#f1c40f\", \"#e67e22\", \"#e74c3c\", \"#ecf0f1\", \"#95a5a6\"];\n  const colouredSquares = colours.map(colour =>\n    <ColouredSquare id={nanoid()} key={colour} backgroundColour={colour} selected={handleSquareSelected}></ColouredSquare>\n  );  \n\n  // toggle ColouredSquare classNames \n  function toggleSquares(e) {\n    // HTML collection of ColouredSquare components\n    const squares = document.getElementById(\"colouredSquares\").children;\n    // loop through collection\n    for (let i = 0; i < squares.length; i++) {\n      // if matches event target\n      // change className to selcted className\n      if (squares[i].id === e.target.id) {\n        squares[i].className = \"selectedSquare square\";\n      }\n      // if no match\n      // change to unselected className  \n      else {\n        squares[i].className = \"square\";\n      }\n    }\n  }\n\n  // opens modal to edit Note component\n  function handleShow() {\n    setShow(true);\n  }\n\n  // closes modal\n  // restores hooks to originals\n  // thus not updating\n  function handleClose() {\n    setTitle(originalTitle);\n    setText(originalText);\n    setHeadingColour(originalHeadingColour);\n    setShow(false);\n  }\n\n  // closes modal\n  // restores hooks to originals\n  // thus not updating\n  function handleCancel() {\n    setTitle(originalTitle);\n    setText(originalText);\n    setHeadingColour(originalHeadingColour);\n    setShow(false);\n  }\n\n  // changes props.title of Note component\n  function handleTitleChange(e) {\n    setTitle(e.target.value)\n  }\n\n  // changes props.text of Note component\n  function handleTextChange(e) {\n    setText(e.target.value)\n  }\n\n  // changes props.headingColour of Note component\n  function handleSquareSelected(e) {\n    const newHeadingColour = e.target.style.backgroundColor;\n    setHeadingColour(newHeadingColour);\n  }\n\n  // saves changes of Note component\n  function handleSubmit() {\n    // if title is blank add \"No title\"\n    if (!title) setTitle(\"No title\");\n    \n    // use callback editNotes function to update changes\n    props.editNotes(props.id, title, text, headingColour);\n\n    // set original props to current props\n    // may not be needed  \n    setOriginalTitle(title);\n    setOriginalText(text);\n    setOriginalHeadingColour(headingColour);\n    setShow(false);\n  }\n\n  // delete note\n  function handleDelete() {\n    // use callback deleteNote function to delete note \n    props.deleteNote(props.id);\n  }\n\n  return (\n    <>\n    <Card>\n      <Card.Header as=\"h5\" style={{backgroundColor: headingColour}}>\n        {title}\n      </Card.Header>\n\n      <Card.Body>\n          {noteText}\n      </Card.Body>\n\n      <Card.Footer>\n        <Button variant=\"outline-primary\" className=\"mr-3\" onClick={handleShow}>Edit</Button>\n        <Button variant=\"outline-danger\" onClick={handleDelete}>Delete</Button>\n      </Card.Footer>\n    </Card>\n\n    <Modal show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Edit Note</Modal.Title>\n      </Modal.Header>\n\n      <Modal.Body>\n        <div>\n          <label htmlFor=\"heading\">Heading Colour</label>\n        </div>\n        <div id=\"colouredSquares\" onClick={toggleSquares}>\n          {colouredSquares}\n        </div>\n        <div>\n          <label htmlFor=\"title\">Edit Title</label>\n        </div>\n        <div>\n          <input className=\"mb-3\" id=\"title\" type=\"text\" value={title} onChange={handleTitleChange}/>  \n        </div> \n        <div>\n          <label htmlFor=\"title\">Edit Text</label> \n        </div>\n        <div>\n          <textarea id=\"text\" type=\"text\" rows=\"15\" value={text} onChange={handleTextChange}/>\n        </div>       \n      </Modal.Body>\n      \n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={handleCancel}>\n          Cancel\n        </Button>\n        <Button variant=\"primary\" onClick={handleSubmit}>\n          Save Changes\n        </Button>\n      </Modal.Footer>\n    </Modal>\n    </>\n  );\n}\n\nexport default Note;","import React, { useState } from 'react';\nimport { nanoid } from \"nanoid\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport CardColumns from 'react-bootstrap/CardColumns';\nimport Button from 'react-bootstrap/Button';\nimport Note from './components/Note';\n\n\nfunction App(props) {\n  // notes hook\n  const [notes, setNotes] = useState(props.notes);\n\n  // update localStorage with notes\n  function updateStorage(notes) {\n    localStorage.setItem(\"DATA\", JSON.stringify(notes));\n  }\n\n  // edit a note\n  function editNotes(id, newTitle, newText, newHeadingColour) {\n    // map existing notes\n    const editedNotes = notes.map(note => {\n      // update note with specified id\n      if (id === note.id) {\n        return {...note, title: newTitle, text: newText, headingColour: newHeadingColour};\n      }\n      return note;\n    });\n    // update notes\n    setNotes(editedNotes);\n    updateStorage(editedNotes);\n  }\n\n  // delete a note\n  function deleteNote(id) {\n    // filter notes, removing note with specified id\n    const deletedNotes = notes.filter(note => note.id !== id);\n    // update notes\n    setNotes(deletedNotes);\n    updateStorage(deletedNotes);\n  }\n\n  // add a new note\n  function addNote() {\n    // create a default note object\n    const note = {\n      id: nanoid(), \n      title: \"Add new note\", \n      text: \"Press the edit button to change the note title, note content and heading colour.\",\n      headingColour: \"#ecf0f1\"\n    };\n    // update notes with existing notes and new note \n    // use spread syntax to add new note to front \n    setNotes([note, ...notes]);\n    updateStorage(notes);\n  }\n  \n  // create an array of Note components to render\n  const notesList = notes.map(note => \n    <Note \n      id={note.id} \n      key={note.id} \n      title={note.title} \n      text={note.text} \n      editNotes={editNotes}\n      deleteNote={deleteNote}\n      headingColour={note.headingColour}\n    >\n    </Note>\n  );\n\n  return (\n    <Container fluid>\n        <Row>\n          <Col sm={12}>\n            <h1 className=\"text-center\">Quick Notes</h1>\n            <hr></hr>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col sm={12}>\n            <Button variant=\"success\" className=\"mb-3 mr-3\" onClick={addNote}>New Note</Button>\n          </Col>\n        </Row>\n\n        <CardColumns>\n          {notesList}\n        </CardColumns>\n      </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { nanoid } from 'nanoid';\nimport './index.css';\nimport App from './App';\n\n// use localStorage to store notes\n// or if first time use default note\nconst DATA = localStorage.DATA ? JSON.parse(localStorage.DATA) : [{\n  id: nanoid(), \n  title: \"My first note\", \n  text: \"Press the edit button to change the note title, note content and heading colour.\",\n  headingColour: \"#ecf0f1\"\n}];\n\nReactDOM.render(\n  <React.StrictMode>\n    <App notes={DATA}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}